apply plugin: 'java'
apply plugin: 'idea'

project.version = "1.0-SNAPSHOT"
project.group = 'com.codingchili'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    version = rootProject.version
    group = rootProject.version

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    sourceSets {
        main {
            java {
                srcDir 'main/java'
            }
            resources {
                srcDir 'main/resources'
            }
        }
        test {
            java {
                srcDir 'test/java'
            }
            resources {
                srcDir 'test/resources'
            }
        }
    }

    repositories {
        maven { url 'http://repo.maven.apache.org/maven2' }
    }

    test {
        testLogging {
            exceptionFormat "full"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }
}

task archiveZip(type: Zip, dependsOn: 'jar') {
    baseName = 'prototype'
    from fileTree('prototype')

    from (subprojects.collect {it.tasks.withType(Jar)}) {
        into 'lib'
    }
}

task copyTask(type: Copy, dependsOn: 'build') {
    from (subprojects.collect {it.tasks.withType(Jar)})
    /*from (subprojects.collect {it.tasks.withType(Javadoc)})*/
    from (subprojects.collect {it.tasks.withType(AbstractArchiveTask)})
    destinationDir = new File('release')
}

task prototype(type: JavaExec) {
    workingDir = 'prototype'
    subprojects.each {
        classpath += it.sourceSets.main.runtimeClasspath
    }
    main = 'com.codingchili.core.Launcher'
}

if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = true
        }
        tasks.withType(Test) {
            maxParallelForks = 2
            minHeapSize = '256m'
        }
    }
}
